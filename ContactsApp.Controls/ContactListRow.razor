@inherits GridControlsBase

@using ContactsApp.Model;

@inject NavigationManager Nav

@if (CurrentContact != null)
{
    <tr>
        <td><span title="Edit" class="clickable" @onclick="Edit">&nbsp;📝&nbsp;</span>
        @if (CanDelete)
        {
        <span @onclick="async () => await DeleteRequestAsync()" title="Delete" class="clickable red">❌</span>
        }
        else
        {
            <span>&nbsp;</span>
        }
        &nbsp;</td>
        <td><a href="@ViewLink" alt="View Details" title="View Details">@Name</a></td>
        @if (!DeleteConfirmation)
        {
            <td>@CurrentContact.Phone</td>
            <td>@CurrentContact.Street</td>
            <td>@CurrentContact.City</td>
            <td>@CurrentContact.State</td>
            <td>@CurrentContact.ZipCode</td>
        }
        else
        {
            <td colspan="5">
                <DeletePrompt Confirmation="@(async result => await ConfirmAsync(result))" />
            </td>
        }
    </tr>
}
@code {
    /// <summary>
    /// The <see cref="Contact"/> being rendered.
    /// </summary>
    [Parameter]
    public Contact CurrentContact { get; set; }

    [Parameter]
    public int DeleteRequestId { get; set; }

    [Parameter]
    public EventCallback<int> DeleteRequested { get; set; }

    /// <summary>
    /// Delegate to delete the <see cref="Contact"/>.
    /// </summary>
    [Parameter]
    public EventCallback<Contact> DeleteContact { get; set; }

    public bool CanDelete => !DeleteConfirmation &&
        (DeleteRequestId == 0 || DeleteRequestId == CurrentContact?.Id);

    /// <summary>
    /// Navigation to view.
    /// </summary>
    public string ViewLink => $"/View/{CurrentContact?.Id}";

    /// <summary>
    /// We only care to refresh if the ordering of names has changed
    /// </summary>
    protected override Predicate<string> PropertyFilter
    {
        get => str => str == nameof(Controls.ShowFirstNameFirst);
    }

    /// <summary>
    /// Confirm the delete.
    /// </summary>
    public bool DeleteConfirmation { get; set; }

    /// <summary>
    /// Navigate to edit.
    /// </summary>
    public void Edit()
    {
        Nav.NavigateTo($"/edit/{CurrentContact.Id}");
    }

    /// <summary>
    /// Called based on confirmation.
    /// </summary>
    /// <param name="confirmed"><c>True</c> when confirmed</param>
    /// <returns>A <see cref="Task"/>.</returns>
    public async Task ConfirmAsync(bool confirmed)
    {
        if (confirmed)
        {
            await DeleteAsync();
        }
        else
        {
            DeleteConfirmation = false;
            await DeleteRequested.InvokeAsync(0);
        }
    }

    /// <summary>
    /// Set delete to true.
    /// </summary>
    public async Task DeleteRequestAsync()
    {
        DeleteConfirmation = true;
        await DeleteRequested.InvokeAsync(CurrentContact.Id);
    }

    /// <summary>
    /// Deletes the <see cref="Contact"/>.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    private async Task DeleteAsync()
    {
        await DeleteContact.InvokeAsync(CurrentContact);
        await DeleteRequested.InvokeAsync(0);
        CurrentContact = null;
    }

    /// <summary>
    /// Correctly formatted name.
    /// </summary>
    public string Name => Controls.ShowFirstNameFirst ?
        $"{CurrentContact?.FirstName} {CurrentContact?.LastName}" :
        $"{CurrentContact?.LastName}, {CurrentContact?.FirstName}";
}