@implements IDisposable

@using ContactsApp.BaseRepository; 
@using ContactsApp.Model; 
@using System.Security.Claims; 

@inject ClaimsPrincipal User
@inject NavigationManager Nav
@inject GridControls Controls

@if (!Busy && Contact == null)
{
    <p>Could not find contact with id @ContactId.</p>
}
else
{
    <ContactUpdate Busy="@Busy" Contact="@Contact" DbContact="@DbContact" IsAdd="false"
                   CancelRequest="Cancel"
                   ValidationResult="@(async (success) => await ValidationResultAsync(success))" />
}
@if (ConcurrencyError)
{
    <br />
    <div class="alert alert-danger">
        <p>
            The contact details have changed since it was last loaded. The updated fields are highlighted in the form.
            Please choose an option:
        </p>
        <p><b>Cancel</b> to lose your changes and keep the database version</p>
        <p><b>Submit</b> to force an update with your version</p>
    </div>
}
@if (Error)
{
    <br />
    <div class="alert alert-danger">Failed to update the contact (@ErrorMessage).</div>
}

@code {

    /// <summary>
    /// Id of <see cref="Contact"/> to edit.
    /// </summary>
    [Parameter]
    public int ContactId { get; set; }

    /// <summary>
    /// The <see cref="IBasicRepository{Contact}"/> to service requests.
    /// </summary>
    [Parameter]
    public IBasicRepository<Contact> Service { get; set; }

    /// <summary>
    /// <see cref="Contact"/> being edited.
    /// </summary>
    public Contact Contact { get; set; }

    private bool _disposedValue;

    /// <summary>
    /// Database version of <see cref="Contact"/> when concurrency issues exist.
    /// </summary>
    public Contact DbContact { get; set; }

    /// <summary>
    /// The <see cref="IUnitOfWork"/> to track changes.
    /// </summary>
    private IUnitOfWork UnitOfWork { get; set; }

    /// <summary>
    /// Avoid concurrent requests.
    /// </summary>
    public bool Busy;

    /// <summary>
    /// An error occurred in the update.
    /// </summary>
    public bool Error;

    /// <summary>
    /// A concurrency error needs resolution.
    /// </summary>
    public bool ConcurrencyError;

    /// <summary>
    /// Error message.
    /// </summary>
    public string ErrorMessage = string.Empty;

    /// <summary>
    /// Start it up.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    protected override async Task OnParametersSetAsync()
    {
        Busy = true; // start async
        UnitOfWork = Service.CreateUnitOfWork(User);
        Contact = await Service.LoadAsync(ContactId, UnitOfWork);
        Busy = false; // end async
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Result of form validation.
    /// </summary>
    /// <param name="success"><c>True</c> when model is valid.</param>
    /// <returns>A <see cref="Task"/>.</returns>
    public async Task ValidationResultAsync(bool success)
    {
        if (Busy)
        {
            return;
        }

        if (!success)
        {
            // still need to edit model
            Error = false;
            ConcurrencyError = false;
            return;
        }

        Busy = true; // async
        try
        {
            await UnitOfWork.CommitAsync();
            // go to view to see the record
            Nav.NavigateTo($"/view/{Contact.Id}/true");
        }
        catch (ContactConcurrencyException dbex)
        {
            // concurrency issues!
            ConcurrencyError = true;

            if (dbex.DbContact == null)
            {
                // deleted - show contact not found
                Nav.NavigateTo($"/view/{Contact.Id}");
                return;
            }

            // bind to show labels on form
            DbContact = dbex.DbContact;

            Error = false;
            Busy = false;
        }
        catch (Exception ex)
        {
            // unknown exception
            Error = true;
            ErrorMessage = ex.Message;
            Busy = false;
        }
        await InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Bail out!
    /// </summary>
    public void Cancel()
    {
        Busy = true;
        Nav.NavigateTo($"/{Controls.PageHelper.Page}");
    }

    /// <summary>
    /// Dispose and properly unregister the handler.
    /// </summary>
    /// <param name="disposing"><c>True</c> when disposing.</param>
    protected virtual void Dispose(bool disposing)
    {
        if (!_disposedValue)
        {
            if (disposing)
            {
                if (UnitOfWork != null)
                {
                    UnitOfWork.Dispose();
                    UnitOfWork = null;
                }
            }

            _disposedValue = true;
        }
    }

    public void Dispose()
    {
        // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
}
