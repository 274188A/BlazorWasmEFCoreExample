@using ContactsApp.BaseRepository; 
@using ContactsApp.Model;
@using System.Security.Claims;

@inject ClaimsPrincipal User 
@inject IBasicRepository<Contact> Repo
@inject NavigationManager Nav
@inject GridControls Controls

@if (NotFound)
{
    <p>A contact with that id doesn't exist.</p>
}
else
{
    @if (Contact == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <h1>@Contact.LastName, @Contact.FirstName</h1>
        <br />
        @if (EditSuccess)
        {
            <div class="alert alert-success">Successfully updated the contact.</div>
        }
        <hr />
        <h2>📞 Phone</h2>
        <br />
        <h3>@Contact.Phone</h3>
        <br />
        <h2>🏠 Address</h2>
        <br />
        <h3>@Contact.Street</h3>
        <h3>@Contact.City, @Contact.State @Contact.ZipCode</h3>
        <br />
        <button class="btn btn-primary" @onclick="GoBack">🔙 Back to List</button>
        @if (!Deleted)
        {
            <button class="btn btn-primary" @onclick="GoEdit">Edit</button><span>&nbsp;</span>
            @if (!ShowConfirmation)
            {
                <button class="btn btn-danger" @onclick="@(() => ShowConfirmation = true)">Delete</button>
            }
            else
            {
                <br />
                <br />
                <DeletePrompt Confirmation="@(async result => await ConfirmAsync(result))" />
            }
        }
        else
        {
            <div class="btn btn-danger">🚫 This item has been deleted.</div>
        }
    }
}

@code {
    /// <summary>
    /// Internal tracking of asynchronous.
    /// </summary>
    private bool _loading;

    /// <summary>
    /// Avoid multiple loads.
    /// </summary>
    private bool _loaded;

    /// <summary>
    /// Id from route of <see cref="Contact"/>.
    /// </summary>
    [Parameter]
    public int ContactId { get; set; }

    /// <summary>
    /// Navigation check.
    /// </summary>
    private int _lastContactId;

    /// <summary>
    /// <c>True</c> with redirect from add.
    /// </summary>
    [Parameter]
    public bool EditSuccess { get; set; }

    /// <summary>
    /// The <see cref="Contact"/> to view.
    /// </summary>
    public Contact Contact { get; set; }

    /// <summary>
    /// Set to <c>true</c> when not found.
    /// </summary>
    public bool NotFound = false;

    /// <summary>
    /// Set to <c>true</c> when delete is requested.
    /// </summary>
    public bool ShowConfirmation = false;

    /// <summary>
    /// Set to true when delete is successful
    /// </summary>
    public bool Deleted = false;

    /// <summary>
    /// Loaded the component.
    /// </summary>
    /// <param name="firstRender"><c>true</c> on first render.</param>
    /// <returns>A <see cref="Task"/>.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await LoadContactAsync();
        }
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Navigated.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    protected override async Task OnParametersSetAsync()
    {
        if (_lastContactId != ContactId)
        {
            _loaded = false;
            _lastContactId = ContactId;
            await LoadContactAsync();
        }
        await base.OnParametersSetAsync();
    }

    /// <summary>
    /// Back to grid.
    /// </summary>
    public void GoBack()
    {
        Nav.NavigateTo($"/{Controls.PageHelper.Page}");
    }

    /// <summary>
    /// Edit it.
    /// </summary>
    public void GoEdit()
    {
        Nav.NavigateTo($"/edit/{Contact.Id}");
    }

    /// <summary>
    /// Confirm deletion.
    /// </summary>
    /// <param name="result"><c>True</c> when user confirmed</param>
    /// <returns>A <see cref="Task"/>.</returns>
    public async Task ConfirmAsync(bool result)
    {
        if (result)
        {
            await DeleteAsync();
        }
        else
        {
            ShowConfirmation = false;
            EditSuccess = false;
        }
    }

    /// <summary>
    /// Loads the <see cref="Contact"/>.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    private async Task LoadContactAsync()
    {
        if (_loading || _loaded)
        {
            return; //avoid concurrent requests
        }

        NotFound = false;
        Contact = null;
        _loading = true;
        Contact = await Repo.LoadAsync(ContactId, null);
        _loading = false;
        _loaded = true;
        if (Contact == null)
        {
            NotFound = true;
        }
    }

    /// <summary>
    /// Deletes the contact.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    private async Task DeleteAsync()
    {
        if (_loading)
        {
            return; // avoid concurrent requests
        }

        _loading = true;
        var result = await Repo.DeleteAsync(ContactId, User);
        _loading = false;
        if (result)
        {
            Deleted = true;
        }
        else
        {
            _loaded = false;
            // show not found
            await LoadContactAsync();
        }
    }
}
